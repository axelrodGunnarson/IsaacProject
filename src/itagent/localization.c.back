#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <math.h>
#include <time.h>
#include <pthread.h>
#include <string.h>
#include "../include/localization.h"
#include "../include/blackboard.h"

#define FLAG_ASSENTE -1
#define RADIUS_BASE 1

//AGGIORNATO: 09/22 22.49

int scelta;
body_data io;
int errore_pos;

void cerca_minima_distanza (int *, int *, int *);
void doppia_colonna (int, int, int);
void doppia_riga (int, int, int);
boolean calcolo_offset (int, int, int, int, int);
void calcola_angoli (int, int, int);
void calcola_angolazione();
int trova_io(int);
void trova_palla();
void trova_giocatori();
aplayer_data calcola_posizione_giocatori (rplayer_data);
void fai_offset();
void togli_offset();
float calcolo_offset_angolo (float);
int cerca_palo_vicino();
void calcola_velocita_io();

void sperimentale();
void calcolo_offset_sperimentale(int, int, int);
void cerca_minima_distanza_sperimentale(int *, int *);
void calcola_angoli_sperimentale (int, int);
boolean escludi (int *, int, int);


extern sem_t s_localization, s_localizationComplete/*, s_seeParsed*/, s_cleanerComplete;


int localization()
{
int modalita=1;     //1 per normale, 2 per sperimentale

clock_t start, end;
double nsec=0;
//struct timespec ts;
//int lock;


/*ts.tv_sec=0;
ts.tv_nsec=(SENSE_STEP_MS/3)*(1e6); // AKA 50ms with the standard step of 150ms for each vision msg*/

//ts.tv_sec=0;
//ts.tv_nsec=(0.3*SENSE_STEP_MS)*(1e6); // AKA 50ms with the standard step of 150ms for each vision msg




init(); //inizializzo i vettori di offset e i vettori colonna e riga

<<<<<<< HEAD
//memset(&io,0,sizeof(io));

////printf ("vuoi modalità doppia (1) o sperimentale (2)?");
//scanf("%d", &modalita);
////printf("Buongiorno, l'input verrà caricato tra 1 secondo\n");

//sleep (1);
=======
sleep (1);
>>>>>>> 4a11326b8df124cc75f0a64eddef37f289741114
while (1) {
    sem_wait(&s_localization);
    start = clock();

	//err_msg("localization\n");
   	errore_pos=0;
<<<<<<< HEAD
	//lock=sem_timedwait(&s_seeParsed, &ts); //wait see msg 50ms, if it timed out, apply offset! else do normal work
	sem_wait(&s_cleanerComplete);
	//if(lock==0){
	trova_io(1);
	/*} else
		errore_pos=1;*/
    
	if (errore_pos == 0  ){ // I KNOW WHERE I AM
		//int time=getTime(&blackboard);	
		//printf("%i - provo a trovare palla!\n",time);
=======
	lock=sem_timedwait(&s_seeParsed, &ts); //wait see msg 50ms, if it timed out, apply offset! else do normal work
	if(lock==0){
		trova_io(modalita);
	} else
		errore_pos=1;

	if (errore_pos == 0  ){
		int time=getTime(&blackboard);
>>>>>>> 4a11326b8df124cc75f0a64eddef37f289741114
		trova_palla();
		fai_offset();
		updateBody(&blackboard, io);
		resetOffset(&blackboard);
<<<<<<< HEAD
		//print();
	}else{ // NOT ENOUGH DATA TO LOCALIZE MYSELF
		applyOffset(&blackboard);
		io=getBody(&blackboard);
		togli_offset();
		//int time=getTime(&blackboard);	
		//printf("%i - provo a trovare palla!\n",time);
=======
    }
	else{
		applyOffset(&blackboard);
		io=getBody(&blackboard);
		togli_offset();
		int time=getTime(&blackboard);
>>>>>>> 4a11326b8df124cc75f0a64eddef37f289741114
		trova_palla();
		fai_offset();
		//LUK
		/*body_data body=getBody(&blackboard);
		io.x=body.x;
		io.y=body.y;
		io.body_angle=body.body_angle;
		io.head_angle=0;*/
		//trova_palla();
		//trova_giocatori();
    }

	//DEBUG
	//print_io();


	sem_post(&s_localizationComplete);
	end=clock();
	nsec=(((double)end-start)/CLOCKS_PER_SEC)*(1e9);
    if(nsec>SIMULATION_STEP_MS*(1e6))
        err_msg("localization() - DANGER, time is too fast!");
}

	return 0;
}

int trova_io (int modalita) {

//find the place of IO, looking for two poles on same row/column and calculation of position of the player (Origin in bottom-left corner)

int palo_1, palo_2;
int scelta;

palo_1 = -1;

if (modalita == 1)
    {
    cerca_minima_distanza(&palo_1, &palo_2, &scelta);
    if (palo_1 != -1)
        {
        if (scelta == 0)
            doppia_colonna(palo_1, palo_2, scelta);
        else if (scelta == 1)
            doppia_riga(palo_1, palo_2, scelta);
        io.time=getTime(&blackboard);
        }
    else
        errore_pos = 1;
    }
/*  //implementation of experimental mode
else if (modalita == 2)
    {
    cerca_minima_distanza_sperimentale(&palo_1, &palo_2);
    if (palo_1 != -1)
        sperimentale();
    else
        errore_pos=1;
    }
*/
if (errore_pos == 0)
    return 0;
return 1;
}

void trova_palla () {
<<<<<<< HEAD
//int time=getTime(&blackboard);
//printf("%i - Cerco la palla.. \n",time);
//funzione che trova la palla
=======

//Find the ball
>>>>>>> 4a11326b8df124cc75f0a64eddef37f289741114


/*if the ball is on the left respect to the player the internal angle between the ball and the direction of the player is found via subtraction (if right via addition, its complementar give the absolute angle.
Using the absolute angle i find where is the ball on a cartesian system centered on the player and i know which operations i have to do on the x and y axis to find the absolute position of the ball.
*/

float angolo, dir_change;

angolo=0;

rball_data ball_rel = getRelBall(&blackboard);
if (ball_rel.time == FLAG_ASSENTE){
	//printf("%i - Ball non seen\n",time);
    return;
}
aball_data ball_abs;

if (ball_rel.direction > 0)     //sum or sub of the angle
    angolo = fabs (io.body_angle - io.head_angle) - fabs (ball_rel.direction);
else if (ball_rel.direction < 0)
    angolo = fabs (io.body_angle -io.head_angle) + fabs (ball_rel.direction);
else
    angolo =0;

angolo = calcolo_offset_angolo (angolo);

ball_abs.x = cos(angolo*DEG_RAD)*ball_rel.distance + io.x;  //absolute coordinates
ball_abs.y = sin(angolo*DEG_RAD)*ball_rel.distance + io.y;
ball_abs.direction = angolo;

dir_change = ball_rel.dir_change + angolo;    //speed
dir_change = calcolo_offset_angolo(dir_change);
ball_abs.dir_change = dir_change;
ball_abs.dist_change = ball_rel.dist_change;

ball_abs.x = ball_abs.x - FIELD_LENGTH/2;   //offset to mov origin on the center of the field
ball_abs.y = - (ball_abs.y - FIELD_HEIGHT/2 );


<<<<<<< HEAD
/*printf("%i - BALL: x=%f y=%f\n",time,ball_abs.x,ball_abs.y);
body_data b=getBody(&blackboard);
printf("%i - Body: x=%f y=%f\n",time,b.x,b.y);*/

=======
int time=getTime(&blackboard);
>>>>>>> 4a11326b8df124cc75f0a64eddef37f289741114

updateAbsBall(&blackboard, ball_abs);
}

void trova_giocatori () {

//find all players and their position

rplayer_data *vett_players;
aplayer_data temp;
int num_players, i;
float dir_change/*, radius*/;

vett_players = (rplayer_data *) malloc (ALOTOF_PLAYERS*sizeof(rplayer_data));

getRelPlayers(&blackboard, &num_players, vett_players);
for (i = 0; i < num_players; i++)
     {
     temp = calcola_posizione_giocatori (vett_players[i]);
     temp.x = temp.x - FIELD_LENGTH/2;
     temp.y = - (temp.y - FIELD_HEIGHT/2);

     dir_change = vett_players[i].dir_change + temp.direction; //speed
     dir_change = calcolo_offset_angolo(dir_change);
     temp.dir_change = dir_change;
     temp.dist_change = vett_players[i].dist_change;
<<<<<<< HEAD
     //radius =  RADIUS_BASE* sqrt (pow ( (temp.x- io.x) / vett_players[i].distance, 2) + pow ( (temp.y - io.y) /vett_players[i].distance, 2) ); //area di influenza circolare. TODO: ampliare la base dati per inserire il raggio
=======
     radius =  RADIUS_BASE* sqrt (pow ( (temp.x- io.x) / vett_players[i].distance, 2) + pow ( (temp.y - io.y) /vett_players[i].distance, 2) ); //influence area TODO: where do i put it?!
>>>>>>> 4a11326b8df124cc75f0a64eddef37f289741114

     updateAbsPlayer(&blackboard, temp);
     }
free(vett_players);
}

aplayer_data calcola_posizione_giocatori (rplayer_data giocatore) {

//calculate the position and angle of each player

aplayer_data temp;
float angolo;

if (giocatore.direction > 0)   //same as ball calculations
    angolo = fabs (io.body_angle -io.head_angle) - fabs (giocatore.direction);
else if (giocatore.direction < 0)
    angolo = fabs (io.body_angle -io.head_angle) + fabs (giocatore.direction);
else
    angolo =0;

angolo = calcolo_offset_angolo(angolo);
temp.x = cos(angolo*DEG_RAD)*giocatore.distance + io.x;
temp.y = sin(angolo*DEG_RAD)*giocatore.distance + io.y;

temp.direction = angolo;

temp.body_face_dir = angolo + giocatore.body_face_dir;
temp.body_face_dir = calcolo_offset_angolo (temp.body_face_dir);

temp.head_face_dir = temp.body_face_dir - giocatore.head_face_dir;
temp.head_face_dir = calcolo_offset_angolo (temp.head_face_dir);

return temp;
}

float calcolo_offset_angolo (float angolo) {

//support to make the angle stay in [0-360] range

if (angolo < 0)
    return (360+angolo);
if (angolo > 360)
    return (angolo-360);
return angolo;

}

void cerca_minima_distanza (int * palo_1, int * palo_2, int *scelta) {


/*calculation of the poles to be used to calculate position. It will take the two poles on the same row/column which have the best average distance from the player
Parameters modified: the two poles, raw/column set and the number of the row/column.*/

int i, minimo, dist_media;
*scelta=2;
minimo=9999;
for (i=0; i< TOTALE_COLONNE; i++)
    {
        int contatore_palo1,contatore_palo2;
        for (contatore_palo1=0; contatore_palo1< vett_base_colonne[i].num_pali; contatore_palo1++)
            if ( getRelFlag(vett_base_colonne[i].vett[contatore_palo1], &blackboard).time != FLAG_ASSENTE) //find the first pole
                    for (contatore_palo2=contatore_palo1+1; contatore_palo2 <(vett_base_colonne[i].num_pali); contatore_palo2++) //looking for another one on the same column
                        if (getRelFlag(vett_base_colonne[i].vett[contatore_palo2], &blackboard).time != FLAG_ASSENTE)
                        {
                            dist_media= (getRelFlag(vett_base_colonne[i].vett[contatore_palo2], &blackboard).distance +getRelFlag(vett_base_colonne[i].vett[contatore_palo1], &blackboard).distance)/2; //average distance
                            if (dist_media < minimo) //minimum decision
                            {
                                minimo=dist_media;
                                *palo_1 = vett_base_colonne[i].vett[contatore_palo1];
                                *palo_2 = vett_base_colonne[i].vett[contatore_palo2];
                                *scelta=0;
                            }
                        }

    }
for (i=0; i< TOTALE_RIGHE; i++)
    {
        int contatore_palo1,contatore_palo2;
        for (contatore_palo1=0; contatore_palo1< vett_base_righe[i].num_pali; contatore_palo1++)
            if (getRelFlag(vett_base_righe[i].vett[contatore_palo1],&blackboard).time != FLAG_ASSENTE)

                    for (contatore_palo2=contatore_palo1+1; contatore_palo2 <(vett_base_righe[i].num_pali); contatore_palo2++)
                        if (getRelFlag(vett_base_righe[i].vett[contatore_palo2], &blackboard).time != FLAG_ASSENTE)
                        {
                            dist_media= (getRelFlag(vett_base_righe[i].vett[contatore_palo2], &blackboard).distance +getRelFlag(vett_base_righe[i].vett[contatore_palo1], &blackboard).distance)/2;
                            if (dist_media < minimo)
                            {
                                minimo=dist_media;
                                *palo_1 = vett_base_righe[i].vett[contatore_palo1];
                                *palo_2 = vett_base_righe[i].vett[contatore_palo2];
                                *scelta=1;
                            }
                        }

    }
}


<<<<<<< HEAD
void cerca_minima_distanza_sperimentale (int *palo_1, int *palo_2) {

*palo_1 = cerca_palo_vicino(NULL, 0);
int vett_esclusi[1];
vett_esclusi [0] = *palo_1;
*palo_2 = cerca_palo_vicino (vett_esclusi, 1);
}


void sperimentale () {

int palo_1, palo_2;
float alfa, angolo;

cerca_minima_distanza_sperimentale(&palo_1, &palo_2);

calcola_angoli_sperimentale(palo_1, palo_2);

//printf ("\nangoli interni: palo_1 : %f, palo_2: %f, giocatore: %f", vett_angoli_interni[0], vett_angoli_interni[1], vett_angoli_interni[2]);

int pivot= palo_1;
//int n_pivot = 0;

float os_x = fabs ( vett_offset[palo_1].offset_x - vett_offset [palo_2].offset_x);
float os_y = fabs ( vett_offset[palo_1].offset_y - vett_offset [palo_2].offset_y);


alfa = atan(os_y/os_x)*RAD_DEG;

if (vett_angoli_interni[2] + alfa < 90)
    angolo = 90 - alfa - vett_angoli_interni[2];
else
    angolo = 180 - alfa -vett_angoli_interni[2];

//TODO: risolvere il problema su quale sia il palo sul quale è incentrata la misura di alfa


io.x = getRelFlag(pivot, &blackboard).distance*sin(angolo);
io.y = getRelFlag(pivot, &blackboard).distance*cos(angolo);

//printf ("\n palo_1 = %d, palo_2 = %d, pivot = %d, angolo risultante = %f \n gli offset sono x: %f y: %f \n misure relative x: %f, y: %f", palo_1, palo_2, pivot, angolo, os_x, os_y, io.x, io.y);

calcolo_offset_sperimentale (pivot, palo_1, palo_2);

calcola_angolazione();
calcola_velocita_io();

}

void calcolo_offset_sperimentale (int pivot, int palo_1, int palo_2) {

int vett_esclusi[2] = {palo_1, palo_2};

int palo = cerca_palo_vicino (vett_esclusi, 2);

if (palo == -1)
    {
    errore_pos=1;
    return;
    }

float vett_err[4];
float temp_x = vett_offset[pivot].offset_x - vett_offset[palo].offset_x;
float temp_y = vett_offset[pivot].offset_y - vett_offset[palo].offset_y;
vett_err[0] = sqrt( pow(temp_x + io.x, 2) + pow (temp_y + io.y, 2 ) ) - getRelFlag(palo, &blackboard).distance;
vett_err[1] = sqrt( pow(temp_x - io.x, 2) + pow (temp_y + io.y, 2 ) ) - getRelFlag(palo, &blackboard).distance;
vett_err[2] = sqrt( pow(temp_x - io.x, 2) + pow (temp_y - io.y, 2 ) )- getRelFlag(palo, &blackboard).distance;
vett_err[3] = sqrt( pow(temp_x + io.x, 2) + pow (temp_y - io.y, 2 ) ) - getRelFlag(palo, &blackboard).distance;

int num = 0;
int i;
for (i=1; i<4; i++)
	if (vett_err[i] < vett_err[num])
		num = i;
switch (num) {
	case 0:
        io.x = vett_offset[pivot].offset_x + io.x;
		io.y = vett_offset[pivot].offset_y + io.y;
		break;
	case 1:
        io.x = vett_offset[pivot].offset_x - io.x;
		io.y = vett_offset[pivot].offset_y + io.y;
		break;
	case 2:
        io.x = vett_offset[pivot].offset_x - io.x;
		io.y = vett_offset[pivot].offset_y - io.y;
		break;
	case 3:
        io.x = vett_offset[pivot].offset_x + io.x;
		io.y = vett_offset[pivot].offset_y + io.y;
		break;
	}
//printf ("\n palo di offset: %d, nel quadrante %d+1", palo, num );
}


void calcola_angoli_sperimentale (int palo_1, int palo_2) {

//calcolo dell'angolo riferito al player, salvato in vett_ang[2]
if ( (getRelFlag(palo_1, &blackboard).direction >=0 && getRelFlag(palo_2, &blackboard).direction>=0) || (getRelFlag(palo_1, &blackboard).direction<=0 && getRelFlag(palo_2, &blackboard).direction<=0) )
    vett_angoli_interni[2] = fabs ( getRelFlag(palo_1, &blackboard).direction - getRelFlag(palo_2, &blackboard).direction );
else
    vett_angoli_interni[2] = fabs (getRelFlag(palo_1, &blackboard).direction) + fabs (getRelFlag(palo_2, &blackboard).direction );

float bordo = sqrt ( pow(getRelFlag(palo_1, &blackboard).distance,2) + pow(getRelFlag(palo_2, &blackboard).distance,2) - 2*getRelFlag(palo_1, &blackboard).distance*getRelFlag(palo_2, &blackboard).distance*cos(vett_angoli_interni[2]));

double param = (pow(getRelFlag(palo_1, &blackboard).distance,2) + pow(bordo,2) - pow(getRelFlag(palo_2, &blackboard).distance,2)) / (2*getRelFlag(palo_1, &blackboard).distance*bordo);
if (param > 1)
    param=1;
if (param < -1)
    param = -1;
vett_angoli_interni[0] = acos ( param )*RAD_DEG;

param = (pow(getRelFlag(palo_2, &blackboard).distance,2) + pow(bordo,2) - pow(getRelFlag(palo_1, &blackboard).distance,2)) / (2*getRelFlag(palo_2, &blackboard).distance*bordo);
if (param > 1)
    param=1;
if (param < -1)
    param = -1;

vett_angoli_interni[1] = acos ( param )*RAD_DEG;


}


=======
>>>>>>> 4a11326b8df124cc75f0a64eddef37f289741114
void doppia_riga (int palo_1, int palo_2, int scelta) {


/*called if we took two poles on the same ROW.
3 cases:
1. the trinagle has all angle <90
2. the angle on pole_1 is >90 (player above the poles)
3 the angle on pole_" is >90 (player below the poles)

It first calculate the internal angles of the triangle, then calculate the relative position of the player. Absolute position calculated via calcola_offset function and saved in io
*/

calcola_angoli(palo_1, palo_2, scelta);

int pivot, maggiore, minore, caso;
float dist_x, dist_y;
io = getBody(&blackboard);

if (vett_angoli_interni[0]<90 && vett_angoli_interni[1]<90) //caso 1
    {
    caso=1;
    if (vett_angoli_interni[0]<vett_angoli_interni[1])
        {
        minore=0;
        pivot=palo_1;
        }
    else
        {
        minore=1;
        pivot=palo_2;
        }
    dist_x = getRelFlag(pivot, &blackboard).distance*cos(vett_angoli_interni[minore]*DEG_RAD);
    dist_y = getRelFlag(pivot, &blackboard).distance*sin(vett_angoli_interni[minore]*DEG_RAD);

    io.x = dist_x; //scrivo coordinate relative
    io.y = dist_y;

    boolean sotto = calcolo_offset(palo_1, caso, palo_1, palo_2, scelta); //look if the player is below or above the ples

    if (sotto)
        dist_y = vett_offset[palo_1].offset_y - dist_y;
    else
        dist_y = vett_offset[palo_1].offset_y + dist_y;
    dist_x = vett_offset[palo_1].offset_x + dist_x; //i always use pole_1 which is the one on the left
    }
else
    {
    if (vett_angoli_interni[0]>90) //maggiore is the angle >90 and pivot the one <90 (which will be used for calculation of cos and sin)
        {
        maggiore = 0;
        minore = 1;
        pivot = palo_2;
        caso=2;
        }
    else
        {
        maggiore = 1;
        minore = 0;
        pivot = palo_1;
        caso=3;
        }

    dist_y = getRelFlag(pivot, &blackboard).distance*sin(vett_angoli_interni[minore]*DEG_RAD);
    dist_x= sqrt ( pow(getRelFlag(pivot, &blackboard).distance, 2) - pow(dist_y, 2));
    io.x = dist_x; //relative position
    io.y = dist_y;

    boolean sotto = calcolo_offset(pivot, caso, palo_1, palo_2, scelta);
    vett_angoli_interni[maggiore]=180-vett_angoli_interni[maggiore];
    if (sotto)
        dist_y = vett_offset[palo_1].offset_y -dist_y; //absolute dist_y player-pole
    else
        dist_y = vett_offset[palo_1].offset_y + dist_y;

    if (pivot == palo_1) //player is on the right respect to the poles
        dist_x = vett_offset[pivot].offset_x + dist_x; //right=offset to be summed to the cateto
    else
        dist_x = vett_offset[pivot].offset_x - dist_x; //left= cateto to be subtracted
    }

io.x = dist_x;
io.y = dist_y;
calcola_angolazione(); //absolute direction
calcola_velocita_io(); //speed
return;
}

void doppia_colonna(int palo_1, int palo_2, int scelta) {

//function identical to doppia_riga but for columns

calcola_angoli(palo_1, palo_2, scelta);

int dist_x, dist_y, pivot, maggiore, minore;
int caso;
io = getBody(&blackboard);

if (vett_angoli_interni[0]<90 && vett_angoli_interni[1]<90)
    {
    caso=1;
    minore=0;
    pivot=palo_1;

    dist_x = getRelFlag(pivot, &blackboard).distance*sin(vett_angoli_interni[minore]*DEG_RAD);
    dist_y = getRelFlag(pivot, &blackboard).distance*cos(vett_angoli_interni[minore]*DEG_RAD);

    io.x = dist_x; //scrivo coordinate relative
    io.y = dist_y;

    boolean destra = calcolo_offset(pivot, caso, palo_1, palo_2, scelta);
    if (destra == TRUE)
        dist_x = vett_offset[pivot].offset_x + dist_x;
    else
        dist_x = vett_offset[pivot].offset_x - dist_x;
    if (pivot == palo_1)
        dist_y = vett_offset[pivot].offset_y - dist_y;
    else
        dist_y = vett_offset[pivot].offset_y + dist_y;
    }
else
    {
    if (vett_angoli_interni[0]>90)
        {
        maggiore = 0;
        minore = 1;
        pivot = palo_2;
        caso = 2;
        }
    else
        {
        maggiore = 1;
        minore = 0;
        pivot = palo_1;
        caso=3;
        }
    vett_angoli_interni[maggiore]=180-vett_angoli_interni[maggiore];
    dist_x = getRelFlag(pivot, &blackboard).distance*sin(vett_angoli_interni[minore]*DEG_RAD);
    dist_y= sqrt ( pow(getRelFlag(pivot, &blackboard).distance, 2) - pow(dist_x, 2));
    io.x = dist_x;
    io.y = dist_y;

    boolean destra = calcolo_offset(pivot, caso, palo_1, palo_2, scelta);
    if (destra)
        dist_x = vett_offset[palo_1].offset_x + dist_x;
    else
        dist_x = vett_offset[palo_1].offset_x - dist_x;

    if (pivot == palo_1)
        dist_y = vett_offset[palo_1].offset_y - dist_y;
    else
        dist_y = vett_offset[palo_2].offset_y + dist_y;
    }

io.x = dist_x;
io.y = dist_y;
calcola_angolazione();
calcola_velocita_io();
return;
}

void calcola_velocita_io() {

//absolute angle of io.speed


float angolo = io.direction_speed + io.body_angle;
io.direction_speed = calcolo_offset_angolo(angolo);

}


boolean calcolo_offset (int pivot, int caso, int palo_1, int palo_2, int scelta) {

int vicino;
float dist_y_stima, dist_x_stima;
float distanza_x_1, distanza_x_2;
float distanza_y_1, distanza_y_2;
float distanza_x, distanza_y;
float distanza_1, distanza_2;
float err_1, err_2;


/*Look if the player is above/below-left/right respect to the row/column. It's made by hypotising one of the two cases and checking it using another pole
*/

if (scelta == 0)
    {
    if (caso ==2)
            dist_y_stima = vett_offset[pivot].offset_y + io.y;
    else
            dist_y_stima = vett_offset[pivot].offset_y - io.y;

    dist_x_stima = io.x + vett_offset[pivot].offset_x;	//player supposed to be on the right respect to the column

    int vett_esclusi[2] = {palo_1, palo_2};

    vicino = cerca_palo_vicino(vett_esclusi,2);
    if (vicino == -1)
        {
        errore_pos=1;
        return 1;
        }
    distanza_x_1 = dist_x_stima - vett_offset [vicino].offset_x; //distance if i am on the right
    distanza_y = dist_y_stima - vett_offset[vicino].offset_y;
    distanza_1 = sqrt( pow(distanza_x_1, 2) + pow (distanza_y, 2) );

    distanza_x_2 = dist_x_stima - 2*io.x - vett_offset[vicino].offset_x; //distance if i am on the left
    distanza_2 = sqrt( pow(distanza_x_2, 2) + pow (distanza_y, 2) );

    err_1 = fabs (distanza_1 - getRelFlag(vicino, &blackboard).distance);    //errors
    err_2 = fabs (distanza_2 - getRelFlag(vicino, &blackboard).distance);

    if (err_1 <= err_2)
        return TRUE;
    else
        return FALSE;

    }
if (scelta == 1)
    {
    dist_y_stima = vett_offset[pivot].offset_y - io.y;	//supposed player below the row

    if (caso == 2)
        dist_x_stima = vett_offset[pivot].offset_x - io.x;
    else
        dist_x_stima = vett_offset[pivot].offset_x + io.x;

    int vett_esclusi[2] = {palo_1, palo_2};

    vicino = cerca_palo_vicino(vett_esclusi,2);
    if (vicino == -1)
        {
        errore_pos = 1;
        return FALSE;
        }
    distanza_x = dist_x_stima - vett_offset[vicino].offset_x;
    distanza_y_1 = dist_y_stima - vett_offset[vicino].offset_y;
    distanza_1 = sqrt( pow(distanza_x, 2) + pow (distanza_y_1, 2) );

    distanza_y_2 = dist_y_stima + 2*io.y - vett_offset[vicino].offset_y;
    distanza_2 = sqrt( pow(distanza_x, 2) + pow (distanza_y_2, 2) );

    err_1 = fabs (distanza_1 - getRelFlag(vicino, &blackboard).distance);
    err_2 = fabs (distanza_2 - getRelFlag(vicino, &blackboard).distance);

    if (err_1 <= err_2)
        return TRUE;
    else
        return FALSE;
    }
	return 0;

}


void calcola_angoli(int palo_1, int palo_2, int scelta) {

float bordo;
double param;

//find the internal angles of the triangle made by player, pole_1, pole_2

//vett_angoli_interni: angle_pole_1 | angle_pole_2 | angle_player

//angle referred to the player
if ( (getRelFlag(palo_1, &blackboard).direction >=0 && getRelFlag(palo_2, &blackboard).direction>=0) || (getRelFlag(palo_1, &blackboard).direction<=0 && getRelFlag(palo_2, &blackboard).direction<=0) )
    vett_angoli_interni[2] = fabs ( getRelFlag(palo_1, &blackboard).direction - getRelFlag(palo_2, &blackboard).direction );
else
    vett_angoli_interni[2] = fabs (getRelFlag(palo_1, &blackboard).direction) + fabs (getRelFlag(palo_2, &blackboard).direction );

if (scelta ==0)
    bordo = fabs(vett_offset[palo_1].offset_y - vett_offset[palo_2].offset_y); //calcolo dello spazio compreso tra i due pali
else
    bordo = fabs (vett_offset[palo_1].offset_x - vett_offset[palo_2].offset_x);

//angles referred to the poles (correction for results > 1 or < -1)
param = (pow(getRelFlag(palo_1, &blackboard).distance,2) + pow(bordo,2) - pow(getRelFlag(palo_2, &blackboard).distance,2)) / (2*getRelFlag(palo_1, &blackboard).distance*bordo);
if (param > 1)
    param=1;
if (param < -1)
    param = -1;
vett_angoli_interni[0] = acos ( param )*RAD_DEG;

param = (pow(getRelFlag(palo_2, &blackboard).distance,2) + pow(bordo,2) - pow(getRelFlag(palo_1, &blackboard).distance,2)) / (2*getRelFlag(palo_2, &blackboard).distance*bordo);
if (param > 1)
    param=1;
if (param < -1)
    param = -1;

vett_angoli_interni[1] = acos ( param )*RAD_DEG;


}


void fai_offset() {

//Move the origin (0,0) to the center of the field

io.x = io.x - FIELD_LENGTH/2;
io.y = - (io.y - FIELD_HEIGHT/2);
}

void togli_offset() {

//Move the origin to the bottom-left corner of the field

io.x = io.x + FIELD_LENGTH/2;
io.y = - (io.y - FIELD_HEIGHT/2);
}

void calcola_angolazione () {

/*Calculation of the absolute direction of the player. It chooses the closest pole to the player and make calculation on a cartesian system with centre on the player,
obtaining the absolute direction of the player (respect to the horizontal semi-axis)
*/

float angolo, alfa, alfa1;
float dist_x, dist_y;
int quadrante;

int pivot = cerca_palo_vicino(NULL, 0); //find the closest pole

if (pivot == -1)
    {
    io.body_angle=0;
    errore_pos=1;
    return;
    }


dist_x = vett_offset[pivot].offset_x - io.x; //x and y of the pole in order to establish in which quadrant it belongs.
dist_y = vett_offset[pivot].offset_y - io.y;

if (dist_x >= 0)
    {
    if (dist_y >=0)
        quadrante = 1;
    else
        quadrante = 4;
    }
else
    {
    if (dist_y >= 0)
        quadrante = 2;
    else
        quadrante = 3;
    }

if (dist_y == 0)
    alfa1 = 90;
else
    {
    alfa1 = atan(fabs(dist_y) / fabs(dist_x)) * RAD_DEG;
    int diviso = alfa1 / 90;
    alfa = alfa1 - (90*diviso);
    }

if (quadrante%2 == 0) //quadrant 2 or 4
    {
    angolo = alfa - getRelFlag(pivot, &blackboard).direction - io.head_angle; //head_angle è is the relative angle of the head respect to the body
    if (quadrante == 2)
        io.body_angle = 180 - angolo;
    else
        io.body_angle = 360 - angolo;
    }
else    //quadrant 1 or 3
    {
    angolo = alfa + getRelFlag(pivot, &blackboard).direction - io.head_angle;

    if (quadrante == 1)
        io.body_angle = angolo;
    else
        io.body_angle = 180 + angolo;
    }


io.body_angle=-io.body_angle;

while(io.body_angle>360)
	io.body_angle-=360;
while(io.body_angle<-360)
	io.body_angle+=360;
if(io.body_angle>180)
	io.body_angle=-(360-io.body_angle);
if(io.body_angle<-180)
	io.body_angle=360+io.body_angle;

}

int cerca_palo_vicino (int *vettore_esclusi, int dim_vett) {

int minimo, i;
float minima_dist = 9999;
minimo=-1;

//find the closest pole to the player

for (i=0; i< N_FLAGS; i++)
    if (getRelFlag(i, &blackboard).distance < minima_dist && getRelFlag(i, &blackboard).time != FLAG_ASSENTE && escludi (vettore_esclusi,dim_vett,i) == FALSE)
        {
         minimo = i;
         minima_dist = getRelFlag(minimo, &blackboard).distance;
        }
return minimo;

}

boolean escludi (int *vett_esclusi, int dim_vett, int palo) {

/*
check if the chosen pole is admissible or not, depending on the vector of excluded ones
*/

if (dim_vett == 0 || vett_esclusi == NULL)
    return FALSE;

int j;
for (j=0; j < dim_vett; j++)
    if (vett_esclusi[j] == palo)
        return TRUE;
return FALSE;
}


/*
The following is an experimental part, which allows to find the position of the player considering two poles which are not constrained to be on the same row/column
It doesn't work in a general case
*/

/*
void cerca_minima_distanza_sperimentale (int *palo_1, int *palo_2) {

*palo_1 = cerca_palo_vicino(NULL, 0);
int vett_esclusi[1];
vett_esclusi [0] = *palo_1;
*palo_2 = cerca_palo_vicino (vett_esclusi, 1);
}


void sperimentale () {

int palo_1, palo_2;
float alfa, angolo;

cerca_minima_distanza_sperimentale(&palo_1, &palo_2);

calcola_angoli_sperimentale(palo_1, palo_2);

//printf ("\nangoli interni: palo_1 : %f, palo_2: %f, giocatore: %f", vett_angoli_interni[0], vett_angoli_interni[1], vett_angoli_interni[2]);

int pivot= palo_1;
int n_pivot = 0;

float os_x = fabs ( vett_offset[palo_1].offset_x - vett_offset [palo_2].offset_x);
float os_y = fabs ( vett_offset[palo_1].offset_y - vett_offset [palo_2].offset_y);


alfa = atan(os_y/os_x)*RAD_DEG;

if (vett_angoli_interni[2] + alfa < 90)
    angolo = 90 - alfa - vett_angoli_interni[2];
else
    angolo = 180 - alfa -vett_angoli_interni[2];

//TODO: risolvere il problema su quale sia il palo sul quale è incentrata la misura di alfa


io.x = getRelFlag(pivot, &blackboard).distance*sin(angolo);
io.y = getRelFlag(pivot, &blackboard).distance*cos(angolo);

//printf ("\n palo_1 = %d, palo_2 = %d, pivot = %d, angolo risultante = %f \n gli offset sono x: %f y: %f \n misure relative x: %f, y: %f", palo_1, palo_2, pivot, angolo, os_x, os_y, io.x, io.y);

calcolo_offset_sperimentale (pivot, palo_1, palo_2);

calcola_angolazione();
calcola_velocita_io();

}

void calcolo_offset_sperimentale (int pivot, int palo_1, int palo_2) {

int vett_esclusi[2] = {palo_1, palo_2};

int palo = cerca_palo_vicino (vett_esclusi, 2);

if (palo == -1)
    {
    errore_pos=1;
    return;
    }

float vett_err[4];
float temp_x = vett_offset[pivot].offset_x - vett_offset[palo].offset_x;
float temp_y = vett_offset[pivot].offset_y - vett_offset[palo].offset_y;
vett_err[0] = sqrt( pow(temp_x + io.x, 2) + pow (temp_y + io.y, 2 ) ) - getRelFlag(palo, &blackboard).distance;
vett_err[1] = sqrt( pow(temp_x - io.x, 2) + pow (temp_y + io.y, 2 ) ) - getRelFlag(palo, &blackboard).distance;
vett_err[2] = sqrt( pow(temp_x - io.x, 2) + pow (temp_y - io.y, 2 ) )- getRelFlag(palo, &blackboard).distance;
vett_err[3] = sqrt( pow(temp_x + io.x, 2) + pow (temp_y - io.y, 2 ) ) - getRelFlag(palo, &blackboard).distance;

int num = 0;
int i;
for (i=1; i<4; i++)
	if (vett_err[i] < vett_err[num])
		num = i;
switch (num) {
	case 0:
        io.x = vett_offset[pivot].offset_x + io.x;
		io.y = vett_offset[pivot].offset_y + io.y;
		break;
	case 1:
        io.x = vett_offset[pivot].offset_x - io.x;
		io.y = vett_offset[pivot].offset_y + io.y;
		break;
	case 2:
        io.x = vett_offset[pivot].offset_x - io.x;
		io.y = vett_offset[pivot].offset_y - io.y;
		break;
	case 3:
        io.x = vett_offset[pivot].offset_x + io.x;
		io.y = vett_offset[pivot].offset_y + io.y;
		break;
	}
//printf ("\n palo di offset: %d, nel quadrante %d+1", palo, num );
}


void calcola_angoli_sperimentale (int palo_1, int palo_2) {

//calcolo dell'angolo riferito al player, salvato in vett_ang[2]
if ( (getRelFlag(palo_1, &blackboard).direction >=0 && getRelFlag(palo_2, &blackboard).direction>=0) || (getRelFlag(palo_1, &blackboard).direction<=0 && getRelFlag(palo_2, &blackboard).direction<=0) )
    vett_angoli_interni[2] = fabs ( getRelFlag(palo_1, &blackboard).direction - getRelFlag(palo_2, &blackboard).direction );
else
    vett_angoli_interni[2] = fabs (getRelFlag(palo_1, &blackboard).direction) + fabs (getRelFlag(palo_2, &blackboard).direction );

float bordo = sqrt ( pow(getRelFlag(palo_1, &blackboard).distance,2) + pow(getRelFlag(palo_2, &blackboard).distance,2) - 2*getRelFlag(palo_1, &blackboard).distance*getRelFlag(palo_2, &blackboard).distance*cos(vett_angoli_interni[2]));

double param = (pow(getRelFlag(palo_1, &blackboard).distance,2) + pow(bordo,2) - pow(getRelFlag(palo_2, &blackboard).distance,2)) / (2*getRelFlag(palo_1, &blackboard).distance*bordo);
if (param > 1)
    param=1;
if (param < -1)
    param = -1;
vett_angoli_interni[0] = acos ( param )*RAD_DEG;

param = (pow(getRelFlag(palo_2, &blackboard).distance,2) + pow(bordo,2) - pow(getRelFlag(palo_1, &blackboard).distance,2)) / (2*getRelFlag(palo_2, &blackboard).distance*bordo);
if (param > 1)
    param=1;
if (param < -1)
    param = -1;

vett_angoli_interni[1] = acos ( param )*RAD_DEG;


} */
